<!doctype html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">


    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

    <title>Home</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css" integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        .chatbox {
            outline: 1px solid silver;
            min-height: 160px;
            padding: 0.5em;
        
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="row">
            <div class="col"></div>
            <h1>Welcome!</h1>
        </div>
        <hr>

        <div class="row">
            <div class="col-md-8">
                <h3>Chat</h3>

                <div class="form-group">
                    <label for="username">Username:</label>
                    <input type="text" name="username" class="form-control" id="username" autocomplete="off">
                </div>

                <div class="form-group">
                    <label for="message">Message:</label>
                    <input type="text" name="message" class="form-control" id="message" autocomplete="off">
                </div>
                <hr>
                <a href="javascript:void(0)" class="btn btn-primary" id="sendBtn">Send</a>
                <input type="hidden" name="action" id="action">

                <div id="status" class="mt-2 float-end">

                </div>
                <hr>

                <div id="output" class="chatbox">


                </div>
            </div>
            <div class="col-md-4">
                <br>
                <h3>Who's Online</h3>

                <ul id="online_users"></ul>
            </div>
        </div>


        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>


</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js" integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="/static/reconnecting-websocket.min.js"></script>
<script>
    let socket = null;
    let o = document.getElementById('output');

    let userField = document.getElementById('username');
    let messageField = document.getElementById('message');

    window.onbeforeunload = function() {
        console.log("Leaving");
        let jsonData = {};
        jsonData["action"] = "left";
        socket.send(JSON.stringify(jsonData));
    }


    document.addEventListener("DOMContentLoaded", function() {
        socket = new ReconnectingWebSocket(location.protocol.replace("http","ws") + "//" + location.host + "/ws", null, {debug:true, reconnectInterval: 3000});
        console.log(location.protocol.replace("http","ws") + "//" + location.host + "/ws")

        const offline = `<span class="badge bg-danger">Not Connected</span>`;
        const online = `<span class="badge bg-success">Connected</span>`;
        let statusDiv = document.getElementById('status');
        socket.onopen = () => {
            console.log("Successfully Connected");
            statusDiv.innerHTML = online;
        };

        socket.onclose = () => {
            console.log("connection closed");
            statusDiv.innerHTML = offline;
        };

        socket.onerror = error => {
            console.log("there was an error");
            statusDiv.innerHTML = offline;
        };

        socket.onmessage = message => {
            // console.log(message);
            let data = JSON.parse(message.data);
            console.log(data);
            console.log("action is", data.action);

            switch (data.action) {
                case "list_users":
                    let ul = document.getElementById("online_users");
                    while (ul.firstChild) {
                        ul.removeChild(ul.firstChild);
                    }
                    if (data.connected_users.length > 0) {
                        data.connected_users.forEach(user => {
                            let li = document.createElement("li");
                            li.innerText = user;
                            ul.appendChild(li);
                        });
                    }
                    break;
                case "broadcast":
                    o.innerHTML += data.message + "<br>";
                    break;


            }
        };

        
        userField.addEventListener("change", function() {
            socket.send(JSON.stringify({
                action: "username",
                username: userField.value
            }));
        });

        messageField.addEventListener("keydown", function(e) {
            if (e.keyCode === 13) {
                if (!socket) {
                    console.log("no connection!");
                    return false
                }
                e.preventDefault();
                e.stopPropagation();
                sendMessage();
            }
        });

        document.getElementById("sendBtn").addEventListener("click", function() {
            sendMessage();
        });
    })

    function sendMessage() {
        if ((messageField.value.trim() === "") || (userField.value.trim() === "")) {
            errorMessage("Please enter a username and message");
            return false;
        }
        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["message"] = messageField.value;
        jsonData["username"] = userField.value;
        socket.send(JSON.stringify(jsonData));
        messageField.value = "";
    }

    function errorMessage(msg) {
        notie.alert({
            type: "error",
            text: msg,
        })
    }
</script>

</html>